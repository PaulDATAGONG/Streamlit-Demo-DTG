import streamlit as st  # Importation de Streamlit pour cr√©er l'interface web
import plotly.express as px  # Importation de Plotly Express pour les graphiques interactifs

# Configuration de la page Streamlit (titre, ic√¥ne, mise en page)
st.set_page_config(page_title="DataViz ‚Äî D√©mo", page_icon="üìä", layout="wide")

# Titre principal de l'application
st.title("üìä D√©mo Streamlit + Plotly")
# Texte d'introduction
st.write("Bienvenue ! Ceci est votre toute premi√®re page d‚Äôapplication.")

# Chargement d'un jeu de donn√©es exemple int√©gr√© √† Plotly
df = px.data.iris()

# Cr√©ation d'un graphique en nuage de points (scatter plot)
fig = px.scatter(
    df, x="sepal_width", y="sepal_length", color="species",
    title="Iris ‚Äî largeur vs longueur des s√©pales"
)

# Affichage du graphique Plotly dans l'application Streamlit
st.plotly_chart(fig, use_container_width=True)
# --- Section: Donn√©es ---
import pandas as pd
from utils.data import load_data, filter_data

# Affiche un spinner pendant le chargement des donn√©es
with st.spinner("Chargement des donn√©es‚Ä¶"):
    data = load_data()  # Chargement des donn√©es avec cache

# Affiche un aper√ßu interactif des premi√®res lignes du DataFrame
st.write("Aper√ßu des donn√©es :")
st.dataframe(data.head(), use_container_width=True)

# Cr√©e un graphique de l'√©volution des ventes par cat√©gorie
fig_line = px.line(data, x="date", y="ventes", color="categorie",
                   title="Ventes journali√®res")
# Affiche le graphique dans l'application Streamlit
st.plotly_chart(fig_line, use_container_width=True)
# --- Section: Graphiques r√©utilisables ---
from utils.charts import make_line, make_bar

# Affiche une selectbox pour choisir le type de graphique
choix = st.selectbox("Type de graphique", ["Courbe", "Barres"])

# Selon le choix, g√©n√®re la figure correspondante avec le style coh√©rent
if choix == "Courbe":
    fig = make_line(data, x="date", y="ventes", color="categorie",
                    title="Ventes ‚Äî courbe")
else:
    fig = make_bar(data, x="date", y="ventes", color="categorie",
                   title="Ventes ‚Äî barres")

# Affiche le graphique dans Streamlit
st.plotly_chart(fig, use_container_width=True)
# --- Section: Filtres (sidebar) ---
import datetime as dt

with st.sidebar:
    st.header("üéõÔ∏è Filtres")  # Titre du panneau lat√©ral
    cats = sorted(list(data["categorie"].cat.categories))  # Liste tri√©e des cat√©gories
    f_cats = st.multiselect("Cat√©gories", options=cats, default=cats)  # S√©lection multiple des cat√©gories
    dmin = st.date_input("Date min", value=data["date"].min().date())  # S√©lection de la date minimale
    dmax = st.date_input("Date max", value=data["date"].max().date())  # S√©lection de la date maximale

# √âtat partag√©
st.session_state.setdefault("f_cats", f_cats)  # Sauvegarde des cat√©gories s√©lectionn√©es
st.session_state.setdefault("dmin", dmin)      # Sauvegarde de la date min s√©lectionn√©e
st.session_state.setdefault("dmax", dmax)      # Sauvegarde de la date max s√©lectionn√©e
# --- Section: Application des filtres ---

# 1. R√©cup√©rer les valeurs des filtres depuis l'√©tat de session
filtres = dict(
    categorie=st.session_state["f_cats"],
    date_min=st.session_state["dmin"],
    date_max=st.session_state["dmax"]
)

# 2. Appliquer les filtres au DataFrame
df_filtered = filter_data(data, **filtres)

# 3. Afficher un message contextuel avec le nombre de lignes restantes
st.toast(f"{len(df_filtered):,} lignes apr√®s filtre".replace(",", " "), icon="‚úÖ")

# 4. G√©n√©rer et afficher le graphique filtr√©
fig_filt = make_line(
    df_filtered, x="date", y="ventes", color="categorie",
    title="Ventes filtr√©es"
)
st.plotly_chart(fig_filt, use_container_width=True)
# --- Section: Param√®tres d'URL ---

# R√©cup√®re les param√®tres de l'URL (query string)
params = st.query_params

# Affiche les param√®tres d'URL sous forme de dictionnaire
st.write("Param√®tres d'URL :", dict(params))
# --- Section: Export PNG ---
import io

# 1. G√©n√©rer l'image PNG √† partir de la figure Plotly (n√©cessite kaleido)
png = fig.to_image(format="png", scale=2)

# 2. Proposer le t√©l√©chargement de l'image via un bouton Streamlit
st.download_button(
    "üì∑ T√©l√©charger le graphique (PNG)",
    data=png,
    file_name="graphique.png",
    mime="image/png"
)
# --- Section: Export ZIP (rapport minimal) ---
import zipfile, time

# 1. Cr√©er un tampon m√©moire pour stocker l'archive ZIP
buf = io.BytesIO()
with zipfile.ZipFile(buf, "w") as zf:
    # 2. Ajouter le CSV des donn√©es filtr√©es
    zf.writestr("data_filtre.csv", df_filtered.to_csv(index=False))
    # 3. Ajouter le graphique Plotly au format PNG
    zf.writestr("graphique.png", fig_filt.to_image(format="png", scale=2))
    # 4. Ajouter un fichier README horodat√©
    zf.writestr("README.txt", "Rapport export√© depuis l'application Streamlit ‚Äî "+time.strftime("%Y-%m-%d %H:%M:%S"))

# 5. Proposer le t√©l√©chargement du ZIP via Streamlit
st.download_button("üì¶ Exporter le rapport (.zip)", data=buf.getvalue(), file_name="rapport.zip", mime="application/zip")
